# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import os.path as osp
import re
import sys
sys.path.insert(0, osp.abspath(osp.join(os.pardir, os.pardir)))


# -- Project information -----------------------------------------------------

project = 'pent'
copyright = '2018, Brian Skinn'
author = 'Brian Skinn'

from pent import __version__

# The short X.Y version
version = re.match(r"\d+\.\d+", __version__).group()
# The full version, including alpha/beta/rc tags
release = __version__


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = '1.6'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx_issues',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

rst_epilog = """

.. |str| replace:: :class:`str`

.. |list| replace:: :class:`list`

.. |tuple| replace:: :class:`tuple`

.. |None| replace:: :obj:`None`

.. |dict| replace:: :obj:`dict`

.. |ndarray| replace:: :class:`~numpy.ndarray`

.. |Parser| replace:: :class:`~pent.parser.Parser`

.. |Parsers| replace:: :class:`Parsers <pent.parser.Parser>`

.. |Token| replace:: :class:`~pent.token.Token`

.. |ThruList| replace:: :class:`~pent.thrulist.ThruList`

.. |capture_body| replace:: :meth:`~pent.parser.Parser.capture_body`

.. |capture_struct| replace:: :meth:`~pent.parser.Parser.capture_struct`

.. |license_txt| replace:: LICENSE.txt

.. _license_txt: https://github.com/bskinn/pent/blob/master/LICENSE.txt

.. |cour| raw:: html

    <span style="font-family:courier;font-size:90%">

.. |/cour| raw:: html

    </span>

.. |br| raw:: html

    <br/>

.. |nbsp| raw:: html

    &nbsp;

"""

doctest_global_setup = r"""\

from textwrap import dedent

import numpy as np

import pent

def check_pattern(*, pattern, text):
    prs = pent.Parser(body=pattern)
    print("MATCH" if len(prs.capture_body(text)) > 0 else "NO MATCH", end='\n\n')

def show_capture(*, pattern, text):
    prs = pent.Parser(body=pattern)
    print(prs.capture_body(text), end='\n\n')

"""


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'pentdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'pent.tex', 'pent Documentation',
     'Brian Skinn', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'pent', 'pent Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'pent', 'pent Documentation',
     author, 'pent', 'pent Extracts Numerical Text.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'python': ('https://docs.python.org/3/', (None, 'isphx/objects_python.inv')),
                       'numpy': ('https://docs.scipy.org/doc/numpy/', (None, 'isphx/objects_numpy.inv')),}

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for sphinx_issues ----

issues_github_path = "bskinn/pent"